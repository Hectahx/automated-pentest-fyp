import asyncio
import re


async def run_lfimap(url, cookie=None, login=False):
    try:
        # Construct the command to run lfimap.py
        command = [
            'python3', 
            '-u', #Unbuffered mode - allows the command to be read into stdout
            'lfimap.py',
            '-U', url,
            '-v'  # Verbose mode
        ]

        if cookie != None:
            command.extend(["-C", cookie])

            # Run the command
        process = await asyncio.create_subprocess_exec(
            *command,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )

        # Wait for the command to complete and get the output
        stdout, stderr = await process.communicate()

        # The stdout and stderr are bytes, decode to string
        stdout_output = stdout.decode()
        stderr_output = stderr.decode()

        # You can process the output further here
        if process.returncode == 0:
            #print("Command executed successfully.")
            result = extract_vulnerabilities(stdout_output)
            result.append(url)
            return result # Adds the URL to the end of the array returned by this function - shows what pages are vulnerable
        else:
            #print("Command failed.")
            #print(stderr_output)
            return [None,stdout_output]
    except asyncio.subprocess.CalledProcessError as e:
        print(f"An unexpected error occurred: {e}")
        return  [None, f"An unexpected error occurred: {e}"]
    

def extract_vulnerabilities(output):
    #Returns the number of vulnerabilities found, or None if not found.
    match = re.search(r"Vulnerabilities found:\s+(\d+)", output)
    
    if not match:
        return None

    if int(match.group(1)) > 0:
        return [True, f"Number of vulnerabilities found: {int(match.group(1))}"]
    else:
        return [False, f"Number of vulnerabilities found: {int(match.group(1))}"]
        
    
async def main():
    url = "192.168.124.132/login/user.php?page=view_profile.php"
    cookie = "PHPSESSID=p6i0upm2fbsiuv1v4e75240k59"
    # Run sqlmap and get the output
    lfimap_output = await run_lfimap(url,cookie)
    if lfimap_output is not None:
        # Use sqlmap_output for something else
        print(lfimap_output)

if __name__ == '__main__':
    asyncio.run(main())
