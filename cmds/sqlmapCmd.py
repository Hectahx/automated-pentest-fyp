import asyncio

async def run_sqlmap(url: str, login=False):
    # Define the command and parameters as a list
    command = [
        'sqlmap',
        #'-u', '192.168.124.128/login_secured/login.php',
        '-u', url,
        #'--data', 'username=test@test.com&password=test',
        '--forms',
        '--level', '5',
        '--risk', '3',
        '-f',
        '--banner',
        '--ignore-code', '401',
        '--flush-session',
        '--batch'
    ]

    # Run the command
    process = await asyncio.create_subprocess_exec(
        *command,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )

    # Wait for the command to complete and get the output
    stdout, stderr = await process.communicate()

    # The stdout and stderr are bytes, decode to string
    stdout_output = stdout.decode()
    stderr_output = stderr.decode()


    # You can process the output further here
    if process.returncode == 0:
        print("sqlmap executed successfully.")
        return check_sql_injection_found(stdout_output)
    else:
        #print("Command failed.")
        return [None, "Command failed"]
        #return None
    
def check_sql_injection_found(stdout_output: str):
    ## Returns True if the specific phrase is found, False otherwise.
    search_phrase = "sqlmap identified the following injection point"
    if search_phrase in stdout_output:
        payloads = stdout_output.split("\n---\n")
        return [True, payloads[1]]
    else:
        return [False, stdout_output]

async def main():
    # Run sqlmap and get the output
    sqlmap_output = await run_sqlmap()
    if sqlmap_output is not None:
        # Use sqlmap_output for something else
        print(sqlmap_output)

if __name__ == '__main__':
    asyncio.run(main())
