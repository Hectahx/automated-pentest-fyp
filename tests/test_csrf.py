import unittest
import asyncio
from app.util.csrf_scan import check_csrf  # Ensure your module is importable

class TestRunCsrf(unittest.TestCase):
    def setUp(self):
        # Initialize the asyncio loop
        self.loop = asyncio.get_event_loop()

    def run_async_test(self, coro):
        # Utility method to run coroutine tests
        return self.loop.run_until_complete(coro)
    
    def test_invalid_url(self):
        # Test how the system handles an invalid URL format
        invalid_url = "http://192.168.124.132/lsdfsdfogin.php"
        result = self.run_async_test(check_csrf(invalid_url))
        self.assertTrue(result['error'])
        self.assertIsNone(result['is_vulnerable'])
        self.assertIn('invalid URL', result['error_message'])  # Ensure your actual code generates this message

    def test_vulnerable_url_form(self):
        # Test with a known vulnerable URL
        vulnerable_url = "http://192.168.124.132/login/login.php"  # Adjust URL to your test server and endpoint
        result = self.run_async_test(check_csrf(vulnerable_url))
        self.assertTrue(result['is_vulnerable'])
        self.assertIsNotNone(result['forms_without_csrf'])
        self.assertEqual(result['csrf_tokens_in_js'], [])
        self.assertEqual(result['csrf_tokens_in_cookie'], {})
        
    def test_vulnerable_url_ajax(self):
        # Test with a known vulnerable URL
        vulnerable_url = "http://192.168.124.132/login/post.php?id=38"  # Adjust URL to your test server and endpoint
        result = self.run_async_test(check_csrf(vulnerable_url))
        self.assertTrue(result['is_vulnerable'])
        self.assertIsNotNone(result['post_requests'])
        self.assertEqual(result['csrf_tokens_in_js'], [])
        self.assertEqual(result['csrf_tokens_in_cookie'], {})

    def test_invulnerable_url(self):
        # Test with a known invulnerable URL
        invulnerable_url = "http://192.168.124.132:81/login.php"  # Adjust URL to your test server and endpoint
        result = self.run_async_test(check_csrf(invulnerable_url))
        self.assertFalse(result['is_vulnerable'])
if __name__ == '__main__':
    unittest.main()
