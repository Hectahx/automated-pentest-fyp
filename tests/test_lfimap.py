import unittest
import asyncio
from app.cmds.lfimapCmd import run_lfimap  # Adjust the import according to your actual code structure

class TestRunLfimap(unittest.TestCase):
    def setUp(self):
        self.loop = asyncio.get_event_loop()

    def run_async_test(self, coro):
        return self.loop.run_until_complete(coro)
    
    def test_invalid_url(self):
        # Test how the system handles an invalid URL format
        invalid_url = "http://192.168.124.132/login/invalid_test"
        cookie = "PHPSESSID=o269baaj1jq40gd0u2jbdo79cr"
        result = self.run_async_test(run_lfimap(invalid_url, cookie=cookie))
        self.assertTrue(result['error'])
        self.assertIsNone(result['is_vulnerable'])
        self.assertEqual(result['error_message'], "invalid URL")  # Adjust the expected message based on actual output

    def test_vulnerable_url(self):
        # Test with a known vulnerable URL
        vulnerable_url = "http://192.168.124.132:81/vulnerabilities/fi/?page=include.php"  # Adjust URL to your test server and endpoint
        result = self.run_async_test(run_lfimap(vulnerable_url))
        self.assertTrue(result['is_vulnerable'])
        self.assertIsNotNone(result['vulns_found'])

    def test_invulnerable_url(self):
        # Test with a known invulnerable URL
        invulnerable_url = "http://192.168.124.132/login_secured/user.php"  # Adjust URL to your test server and endpoint
        cookie = "PHPSESSID=o269baaj1jq40gd0u2jbdo79cr"
        result = self.run_async_test(run_lfimap(invulnerable_url, cookie=cookie))
        self.assertFalse(result['is_vulnerable'])
        self.assertIsNone(result['vulns_found'])

if __name__ == '__main__':
    unittest.main()