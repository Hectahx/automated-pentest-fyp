import unittest
import asyncio
from app.cmds.sqlmapCmd import run_sqlmap  

class TestRunSqlmap(unittest.TestCase):
    def setUp(self):
        # Initialize the asyncio loop
        self.loop = asyncio.get_event_loop()

    def run_async_test(self, coro):
        # Utility method to run coroutine tests
        return self.loop.run_until_complete(coro)
    
    def test_invalid_url(self):
        # Test how the system handles an invalid URL format
        invalid_url = "http://192.168.124.132/lsdfsdfogin.php"
        result = self.run_async_test(run_sqlmap(invalid_url))
        self.assertTrue(result['error'])
        self.assertIsNone(result['is_vulnerable'])
        self.assertIn('Invalid URL', result['error_message'])  

    def test_vulnerable_url(self):
        # Test with a known vulnerable URL
        vulnerable_url = "http://192.168.124.132:81/vulnerabilities/sqli/"  
        result = self.run_async_test(run_sqlmap(vulnerable_url))
        self.assertTrue(result['is_vulnerable'])
        self.assertIsNotNone(result['vulns_found'])
        

    def test_invulnerable_url(self):
        # Test with a known invulnerable URL
        invulnerable_url = "http://192.168.124.132/login_secured/login.php"  
        result = self.run_async_test(run_sqlmap(invulnerable_url))
        self.assertFalse(result['is_vulnerable'])
        self.assertIsNone(result['vulns_found'])

if __name__ == '__main__':
    unittest.main()
