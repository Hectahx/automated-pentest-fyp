import unittest
import asyncio
from app.cmds.testsslCmd import run_testssl  # Ensure your module is importable

class TestRunTestSSL(unittest.TestCase):
    def setUp(self):
        # Initialize the asyncio loop
        self.loop = asyncio.get_event_loop()

    def run_async_test(self, coro):
        # Utility method to run coroutine tests
        return self.loop.run_until_complete(coro)
    
    def test_invalid_url(self):
        # Test how the system handles an invalid URL format
        invalid_url = "http://192.168.124.132/lsdfsdfogin.php"
        result = self.run_async_test(run_testssl(invalid_url))
        self.assertTrue(result['error'])
        self.assertIsNone(result['is_bad_protocols'])
        self.assertIsNone(result['is_bad_vulns'])
        self.assertIn('invalid URL', result['error_message'])  # Ensure your actual code generates this message

    def test_vulnerable_url(self):
        # Test with a known vulnerable URL
        vulnerable_url = "https://tls-v1-0.badssl.com:1010/"  # Adjust URL to your test server and endpoint
        result = self.run_async_test(run_testssl(vulnerable_url))
        self.assertTrue(result['is_bad_protocols'])
        self.assertTrue(result['is_bad_vulns'])
        self.assertIsNot(result['bad_protocols'], {})
        self.assertIsNot(result['bad_vulns'], {})

    
    def test_invulnerable_url(self):
        # Test with a known invulnerable URL
        invulnerable_url = "https://tls13.1d.pw/"  # Adjust URL to your test server and endpoint
        result = self.run_async_test(run_testssl(invulnerable_url))
        self.assertTrue(result['is_bad_protocols'])
        self.assertFalse(result['is_bad_vulns'])
        self.assertEquals(result['bad_protocols'], {})
        self.assertEquals(result['bad_vulns'], {})
if __name__ == '__main__':
    unittest.main()