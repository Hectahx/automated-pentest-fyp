import re
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

from bs4 import BeautifulSoup


def search_for_csrf_in_js(html):
    # Patterns that might indicate a CSRF token in JavaScript
    csrf_patterns = [
        r"csrf[^=]*=[^;]+",  # Looking for something like csrf = 'token' or csrfToken = 'token'
        r"token[^=]*=[^;]+",  # Similar pattern for 'token'
    ]

    csrf_tokens = []
    for pattern in csrf_patterns:
        matches = re.findall(pattern, html, re.IGNORECASE)
        if matches:
            csrf_tokens.extend(matches)
    return csrf_tokens


def is_csrf_token(cookie_name):
    csrf_patterns = ["csrf", "xsrf", "token"]
    return any(pattern in cookie_name.lower() for pattern in csrf_patterns)


def search_for_post_requests(html):
    patterns = [r"\$\.(post|ajax)\(", r"fetch\(.*,\s*{\s*method:\s*\'POST\'"]

    post_requests = []
    for pattern in patterns:
        matches = re.findall(pattern, html, re.IGNORECASE)
        if matches:
            post_requests.extend(matches)
    return post_requests


def check_csrf(url, user_cookies=None):
    service = Service(executable_path=r"/usr/bin/chromedriver")
    options = webdriver.ChromeOptions()
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    driver = webdriver.Chrome(service=service, options=options)
    driver.get(url)

    if user_cookies:
        for name, value in user_cookies.items():
            driver.add_cookie({"name": name, "value": value})
        driver.get(url)

    html = driver.page_source
    soup = BeautifulSoup(html, "html.parser")

    # Search for CSRF tokens in JavaScript
    csrf_tokens_in_js = search_for_csrf_in_js(html)
    if csrf_tokens_in_js:
        print("Possible CSRF tokens found in JavaScript:")
        for token in csrf_tokens_in_js:
            print(token)
    else:
        print("No CSRF tokens found in JavaScript.")

    post_requests = search_for_post_requests(html)
    forms = soup.find_all("form")

    if post_requests:
        print("Possible POST requests found in JavaScript:")
        for request in post_requests:
            print(request)

    if not post_requests and not forms:
        print("No POST requests in JavaScript and no forms found on the page.")
        driver.quit()
        return

    cookies = driver.get_cookies()
    csrf_tokens_in_cookies = {
        cookie["name"]: cookie["value"]
        for cookie in cookies
        if is_csrf_token(cookie["name"])
    }
    print("CSRF Tokens in Cookies:", csrf_tokens_in_cookies)

    for form in forms:
        csrf_token_in_form = form.find(
            "input",
            type="hidden",
            attrs={"name": lambda name: name and is_csrf_token(name)},
        )
        if csrf_token_in_form:
            print(
                "CSRF Token found in form:",
                form,
                "Token:",
                csrf_token_in_form.get("name", "Unnamed"),
            )
        else:
            print("Possible CSRF vulnerability found in form:", form)

    driver.quit()


if __name__ == "__main__":
    url = "http://192.168.124.132/login/post.php?id=40"
    user_cookies = {"PHPSESSID": "bhsmos9kbpe2khoe5d89q0vser"}
    check_csrf(url, user_cookies)
