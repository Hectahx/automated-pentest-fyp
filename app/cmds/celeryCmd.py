import asyncio

async def run_celery():
    try:
        # Construct the command to run Celery once script is run
        command = [
            'python3', 
            '-m', 
            'celery',
            '-A',
            'run.celery', 
            'worker'
        ]

        # Run the command
        process = await asyncio.create_subprocess_exec(
            *command,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )

        # log or process the output asynchronously
        asyncio.create_task(log_output(process))

    except Exception as e:
        print(f"Failed to start Celery worker: {e}")

async def log_output(process):
    """Logs the output of the Celery worker subprocess."""
    try:
        # This will capture the output and errors until the process is terminated
        stdout, stderr = await process.communicate()

        # The stdout and stderr are bytes, decode to string
        if stdout:
            print(stdout.decode())
        if stderr:
            print(stderr.decode())

    except Exception as e:
        print(f"An error occurred while logging Celery worker output: {e}")

async def main():
    # Start the Celery worker
    await run_celery()

if __name__ == '__main__':
    asyncio.run(main())