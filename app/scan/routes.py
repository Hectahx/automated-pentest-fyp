from flask import request, render_template, jsonify, redirect, url_for, flash, session, Blueprint
from flask_login import current_user, login_required

from ..models import ScanResult
from ..extensions import db
import json
import uuid
from .tasks import complete_scan
import flask


scan_bp = Blueprint('scan', __name__, template_folder='templates')


## Scan Route
@scan_bp.route('/', methods=['POST', 'GET'])
@login_required
def initiate_scan():
    if 'user_id' not in session:
        flash('Please log in to access this page.', 'warning')
        return redirect(url_for('auth.login'))

    if flask.request.method == "GET":
        flash('You can\'t access this page', 'error')
        return redirect(url_for('index'))#

    target = request.form['target']
    scan_id = uuid.uuid4().hex

    scan_data = json.dumps({
        "target" : target,
        "scan_id" : scan_id
    })

    new_scan_result = ScanResult(
        user_id=session['user_id'],
        scan_id=scan_id,
        scan_data=None,
        status='pending'
    )
    db.session.add(new_scan_result)
    db.session.commit()

    # Run the scan asynchronously
    task = complete_scan.delay(scan_data=scan_data)

    return render_template('scan/loading.html', scan_id=scan_id)

@scan_bp.route('/results/<scan_id>')
@login_required
def display_results(scan_id):
    # Fetch the scan result from the database using scan_id
    scan_result = ScanResult.query.filter_by(scan_id=scan_id).first_or_404()
    if scan_result.user_id != current_user.id:
        ### Send to unauthorized access page
        flash('You do not have permission to view this scan', 'danger')
        return redirect(url_for('main.index'))
    results = json.loads(scan_result.scan_data)

    return render_template('scan/results.html', results=results["summary"], scan_id=scan_id, user=current_user)



## Scan Routes More Info
@scan_bp.route('/results/sql/<scan_id>', methods=['GET'])
@login_required
async def sql(scan_id):
    scan_result = ScanResult.query.filter_by(scan_id=scan_id).first_or_404()
    if scan_result.user_id != current_user.id:
        ### Send to unauthorized access page
        flash('You do not have permission to view this scan', 'danger')
        return redirect(url_for('main.index'))
    try:
        results = json.loads(scan_result.scan_data)
    except TypeError as e:
        ()
    if results is None:
        flash('This scan does not exist', 'danger')
        return redirect(url_for('main.index'))
    return render_template('scan/results_sql_injection.html', results=results["output"]["sql_injection"],  user=current_user)

@scan_bp.route('/results/lfi/<scan_id>', methods=['GET'])
@login_required
async def lfi(scan_id):
    scan_result = ScanResult.query.filter_by(scan_id=scan_id).first_or_404()
    if scan_result.user_id != current_user.id:
        ### Send to unauthorized access page
        flash('You do not have permission to view this scan', 'danger')
        return redirect(url_for('main.index'))
    results = json.loads(scan_result.scan_data)

    if results is None:
        return redirect(url_for('index'))
    return render_template('scan/results_lfi.html', results=results["output"]["lfi"],  user=current_user)

@scan_bp.route('/results/csrf/<scan_id>', methods=['GET'])
@login_required
async def csrf(scan_id):
    scan_result = ScanResult.query.filter_by(scan_id=scan_id).first_or_404()
    if scan_result.user_id != current_user.id:
        ### Send to unauthorized access page
        flash('You do not have permission to view this scan', 'danger')
        return redirect(url_for('main.index'))
    results = json.loads(scan_result.scan_data)

    if results is None:
        return redirect(url_for('index'))
    return render_template('scan/results_csrf.html', results=results["output"]["csrf"],  user=current_user)

@scan_bp.route('/results/idor/<scan_id>', methods=['GET'])
@login_required
async def idor(scan_id):
    scan_result = ScanResult.query.filter_by(scan_id=scan_id).first_or_404()
    if scan_result.user_id != current_user.id:
        ### Send to unauthorized access page
        flash('You do not have permission to view this scan', 'danger')
        return redirect(url_for('main.index'))
    results = json.loads(scan_result.scan_data)

    if results is None:
        return redirect(url_for('index'))
    return render_template('scan/results_idor.html', results=results["output"]["idor"],  user=current_user)

@scan_bp.route('/status/<scan_id>')
@login_required
def check_scan_status(scan_id):
    status = get_scan_status(scan_id)
    return jsonify({'status': status})

def get_scan_status(scan_id):
    scan_result = ScanResult.query.filter_by(scan_id=scan_id).first_or_404()
    return scan_result.status