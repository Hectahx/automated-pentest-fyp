from flask import request, render_template, jsonify, redirect, url_for, flash, session, Blueprint
from ..models import ScanResult
from ..extensions import db
import json
import uuid
from .tasks import complete_scan
import flask


scan_bp = Blueprint('scan', __name__, template_folder='templates')


## Scan Route
@scan_bp.route('/', methods=['POST', 'GET'])
def initiate_scan():
    if 'user_id' not in session:
        flash('Please log in to access this page.', 'warning')
        return redirect(url_for('auth.login'))#

    if flask.request.method == "GET":
        flash('You can\'t access this page', 'error')
        return redirect(url_for('index'))#

    target = request.form['target']
    scan_id = uuid.uuid4().hex

    scan_data = json.dumps({
        "target" : target,
        "scan_id" : scan_id
    })

    new_scan_result = ScanResult(
        user_id=session['user_id'],
        scan_id=scan_id,
        scan_data=None,
        status='pending'
    )
    db.session.add(new_scan_result)
    db.session.commit()

    # Run the scan asynchronously
    task = complete_scan.delay(scan_data=scan_data)

    return render_template('scan/loading.html', scan_id=scan_id)

@scan_bp.route('/results/<scan_id>')
def display_results(scan_id):
    # Fetch the scan result from the database using scan_id
    scan_result = ScanResult.query.filter_by(scan_id=scan_id).first_or_404()
    if scan_result.user_id != session["user_id"]:
        ### Send to unauthorized access page
        ()
    results = json.loads(scan_result.scan_data)

    return render_template('scan/results.html', results=results["summary"], scan_id=scan_id)



## Scan Routes More Info
@scan_bp.route('/results/sql/<scan_id>', methods=['GET'])
async def sql(scan_id):
    scan_result = ScanResult.query.filter_by(scan_id=scan_id).first_or_404()
    if scan_result.user_id != session["user_id"]:
        ### Send to unauthorized access page
        ()
    results = json.loads(scan_result.scan_data)

    if results is None:
        return redirect(url_for('index'))
    return render_template('scan/results_sql_injection.html', results=results["output"]["sql_injection"])

@scan_bp.route('/results/lfi/<scan_id>', methods=['GET'])
async def lfi(scan_id):
    scan_result = ScanResult.query.filter_by(scan_id=scan_id).first_or_404()
    if scan_result.user_id != session["user_id"]:
        ### Send to unauthorized access page
        ()
    results = json.loads(scan_result.scan_data)

    if results is None:
        return redirect(url_for('index'))
    return render_template('scan/results_lfi.html', results=results["output"]["lfi"])

@scan_bp.route('/results/csrf/<scan_id>', methods=['GET'])
async def csrf(scan_id):
    scan_result = ScanResult.query.filter_by(scan_id=scan_id).first_or_404()
    if scan_result.user_id != session["user_id"]:
        ### Send to unauthorized access page
        ()
    results = json.loads(scan_result.scan_data)

    if results is None:
        return redirect(url_for('index'))
    return render_template('scan/results_csrf.html', results=results["output"]["csrf"])

@scan_bp.route('/results/idor/<scan_id>', methods=['GET'])
async def idor(scan_id):
    scan_result = ScanResult.query.filter_by(scan_id=scan_id).first_or_404()
    if scan_result.user_id != session["user_id"]:
        ### Send to unauthorized access page
        ()
    results = json.loads(scan_result.scan_data)

    if results is None:
        return redirect(url_for('index'))
    return render_template('scan/results_idor.html', results=results["output"]["idor"])

@scan_bp.route('/status/<scan_id>')
def check_scan_status(scan_id):
    # Implement logic to check the scan's status
    # For demonstration, assuming a simplistic approach
    status = get_scan_status(scan_id)  # Implement this function
    return jsonify({'status': status})

def get_scan_status(scan_id):
    scan_result = ScanResult.query.filter_by(scan_id=scan_id).first_or_404()
    return scan_result.status

'''
async def scan():
    if 'user_id' not in session:
        flash('Please log in to access this page.', 'warning')
        return redirect(url_for('auth.login')) 
    target = request.form['target']

    results = await run_scan_multi(target)

    render_template('scan/loading.html')

    # Convert results to a JSON string to store in a text or JSON column
    results_json = json.dumps(results)

    
    scan_id = uuid.uuid4().hex

    # Create a new ScanResult instance
    new_scan_result = ScanResult(
        user_id=session['user_id'],  # Or use current_user.get_id() with Flask-Login
        scan_data=results_json,
        scan_id=scan_id
    )
    
    # Add to the session and commit to the database
    db.session.add(new_scan_result)
    db.session.commit()

    return redirect(url_for('scan.display_results', scan_id=scan_id))
'''