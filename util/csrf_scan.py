import asyncio
import re
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from bs4 import BeautifulSoup
from concurrent.futures import ThreadPoolExecutor

def search_for_csrf_in_js(html):
    """
    Search for CSRF tokens in JavaScript within the provided HTML content.
    """
    try:
        csrf_patterns = [r"csrf[^=]*=[^;]+", r"token[^=]*=[^;]+"]
        csrf_tokens = []
        for pattern in csrf_patterns:
            matches = re.findall(pattern, html, re.IGNORECASE)
            if matches:
                csrf_tokens.extend(matches)
        return csrf_tokens
    except Exception as e:
        print(f"Error in search_for_csrf_in_js: {e}")
        return []

def is_csrf_token(cookie_name):
    """
    Check if a cookie name contains typical CSRF token identifiers.JSON Beautify
    """
    try:
        csrf_patterns = ["csrf", "xsrf", "token"]
        return any(pattern in cookie_name.lower() for pattern in csrf_patterns)
    except Exception as e:
        print(f"Error in is_csrf_token: {e}")
        return False

def search_for_post_requests(html):
    """
    Search for POST requests within the provided HTML content.
    """
    try:
        patterns = [r"\$\.(post|ajax)\(", r"fetch\(.*,\s*{\s*method:\s*\'POST\'"]
        post_requests = []
        for pattern in patterns:
            matches = re.findall(pattern, html, re.IGNORECASE)
            if matches:
                post_requests.extend(matches)
        return post_requests
    except Exception as e:
        print(f"Error in search_for_post_requests: {e}")
        return []

def check_csrf_sync(url, user_cookies=None):
    """
    Check for CSRF vulnerabilities in a webpage by examining cookies, forms, and JavaScript.
    """
    results = {
        "url" : url,
        "csrf_tokens_in_js": [],
        "csrf_tokens_in_cookie": [],
        "post_requests": [],
        "forms_without_csrf": [],
        "possible_csrf_vulnerability": False
    }

    try:
        service = Service(executable_path=r"/usr/bin/chromedriver")
        options = webdriver.ChromeOptions()
        options.add_argument("--headless")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        driver = webdriver.Chrome(service=service, options=options)

        try:
            driver.get(url)

            if user_cookies:
                for name, value in user_cookies.items():
                    driver.add_cookie({"name": name, "value": value})
                driver.get(url)

            html = driver.page_source
            soup = BeautifulSoup(html, "html.parser")

            results["csrf_tokens_in_js"] = search_for_csrf_in_js(html)
            results["post_requests"] = search_for_post_requests(html)

            cookies = driver.get_cookies()
            results["csrf_tokens_in_cookie"] = {
                cookie["name"]: cookie["value"]
                for cookie in cookies
                if is_csrf_token(cookie["name"])
            }
            #print("CSRF Tokens in Cookies:",  results["csrf_tokens_in_cookie"])

            for form in soup.find_all("form"):
                csrf_token_in_form = form.find(
                    "input",
                    type="hidden",
                    attrs={"name": lambda name: name and is_csrf_token(name)},
                )
                if not csrf_token_in_form:
                    results["forms_without_csrf"].append(str(form))

            # Indicate potential CSRF vulnerability
            if not(results["csrf_tokens_in_js"] or results["csrf_tokens_in_cookie"])  and (results["post_requests"] or results["forms_without_csrf"]):
                results["possible_csrf_vulnerability"] = True

        except Exception as e:
            print(f"Error processing the page: {e}")
        finally:
            driver.quit()

    except Exception as e:
        print(f"Error initializing WebDriver: {e}")

    return results

async def check_csrf(url, user_cookies=None):
    """
    Check for CSRF vulnerabilities in a webpage by examining cookies, forms, and JavaScript. (async)
    """
    loop = asyncio.get_event_loop()
    with ThreadPoolExecutor() as executor:
        return await loop.run_in_executor(executor, check_csrf_sync, url, user_cookies)

async def main():
    url = "http://192.168.124.132/login/post.php?id=40"
    user_cookies = {"PHPSESSID": "4f0g78ghmvk8nmquh5oq7hbadg"}

    # Now you can use check_csrf as an async task
    csrf_task = asyncio.create_task(check_csrf(url, user_cookies))
    await asyncio.gather(csrf_task)
    print(csrf_task.result())

if __name__ == "__main__":
    asyncio.run(main())